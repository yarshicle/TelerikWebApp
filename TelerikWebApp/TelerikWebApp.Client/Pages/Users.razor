@page "/users"
@using TelerikWebApp.Client.Models
@using TelerikWebApp.Client.Components
@using TelerikWebApp.Client.Services
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject UserService UserService
@inject IJSRuntime JSRuntime
@rendermode InteractiveAuto

<PageTitle>Users</PageTitle>

<div class="@(IsGridMaximized ? "grid-container-maximized" : "grid-container-normal")">
	@if (!IsGridMaximized)
	{
		<h1>Users Management</h1>
	}

	<div class="grid-wrapper">
		<div class="grid-header">
			<div class="grid-title">Users</div>
			<div class="grid-controls">
				<TelerikButton OnClick="@ToggleGridMaximize"
							   Icon="@(IsGridMaximized ? SvgIcon.WindowRestore : SvgIcon.Window)"
							   Class="grid-maximize-btn"
							   Title="@(IsGridMaximized ? "Restore" : "Maximize")">
				</TelerikButton>
			</div>
		</div>

		<TelerikGrid Data="@FilteredGridData"
				 Pageable="true"
				 PageSize="20"
				 Sortable="true"
				 FilterMode="GridFilterMode.FilterMenu"
				 Height="@(IsGridMaximized ? "calc(100vh - 120px)" : "600px")"
				 Class="compact-grid">
	<GridSettings>
		<GridPagerSettings InputType="PagerInputType.Input" />
	</GridSettings>
	<GridColumns>
		<GridColumn Field="@nameof(UserViewModel.Id)" Width="80px" Title="ID" />
		<GridColumn Field="@nameof(UserViewModel.FirstName)" Width="150px" Title="First Name" />
		<GridColumn Field="@nameof(UserViewModel.LastName)" Width="150px" Title="Last Name" />
		<GridColumn Field="@nameof(UserViewModel.Email)" Width="250px" Title="Email" />
		<GridColumn Field="@nameof(UserViewModel.Department)" Width="180px" Title="Department" FilterMenuType="@FilterMenuType.CheckBoxList" />
		<GridColumn Field="@nameof(UserViewModel.Position)" Width="200px" Title="Position" FilterMenuType="@FilterMenuType.CheckBoxList" />
		<GridColumn Field="@nameof(UserViewModel.Salary)" Width="120px" Title="Salary" DisplayFormat="{0:C0}" />
		<GridColumn Field="@nameof(UserViewModel.StatusText)" Width="100px" Title="Active" FilterMenuType="@FilterMenuType.CheckBoxList">
			<Template>
				@{
					var user = (UserViewModel)context;
				}
				<span class="status-badge @(user.IsActive ? "status-active" : "status-inactive")">
					@user.StatusText
				</span>
			</Template>
		</GridColumn>
	</GridColumns>
		</TelerikGrid>
	</div>

	<div class="grid-actions">
		<TelerikButton OnClick="@ShowFilterBuilder" Icon="@SvgIcon.Filter" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">
			Create Filter
		</TelerikButton>
		@if (HasActiveFilter)
		{
			<TelerikButton OnClick="@ClearFilter" Icon="@SvgIcon.FilterClear" ThemeColor="@ThemeConstants.Button.ThemeColor.Secondary">
				Clear Filter
			</TelerikButton>
		}
	</div>
</div>

<UserFilterBuilder IsVisible="@ShowFilterWindow"
				   IsVisibleChanged="@((bool value) => ShowFilterWindow = value)"
				   FilterData="@GridViewModels"
				   OnFilterApplied="@ApplyFilter" />

<style>
	.compact-grid {
		--kendo-grid-header-padding-y: 4px;
		--kendo-grid-cell-padding-y: 4px;
		--kendo-grid-font-size: 12px;
		font-size: 12px;
	}

		.compact-grid .k-grid-header .k-header {
			font-weight: 600;
			background-color: var(--kendo-color-primary-subtle);
			padding: 4px 8px !important;
			line-height: 1.2;
		}

		.compact-grid .k-grid-table td {
			border-color: var(--kendo-color-border-alt);
			padding: 4px 8px !important;
			line-height: 1.3;
		}

		.compact-grid .k-filter-row td {
			padding: 2px 4px !important;
			vertical-align: middle;
		}

		.compact-grid .k-filter-row .k-textbox,
		.compact-grid .k-filter-row .k-dropdownlist,
		.compact-grid .k-filter-row .k-numerictextbox {
			height: 28px !important;
			font-size: 11px !important;
			padding: 2px 6px !important;
		}

		.compact-grid .k-filter-row .k-button {
			height: 26px !important;
			width: 26px !important;
			min-width: 26px !important;
			padding: 2px !important;
			font-size: 11px !important;
		}

		.compact-grid .k-filter-row .k-icon {
			font-size: 12px !important;
		}

		.compact-grid .k-pager {
			padding: 6px 8px !important;
			font-size: 11px !important;
		}

			.compact-grid .k-pager .k-button {
				height: 24px !important;
				min-width: 24px !important;
				padding: 2px 6px !important;
				font-size: 11px !important;
			}

			.compact-grid .k-pager .k-numerictextbox {
				height: 28px !important;
				font-size: 11px !important;
				padding: 2px 6px !important;
			}

	.status-badge {
		display: inline-block;
		padding: 2px 8px;
		border-radius: 12px;
		font-size: 11px;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		min-width: 60px;
		text-align: center;
	}

	.status-active {
		background-color: #d4edda;
		color: #155724;
		border: 1px solid #c3e6cb;
	}

	.status-inactive {
		background-color: #f8d7da;
		color: #721c24;
		border: 1px solid #f5c6cb;
	}

	.grid-actions {
		margin-top: 15px;
		display: flex;
		gap: 10px;
		align-items: center;
	}
	
			.grid-actions .k-button {
			height: 32px;
			padding: 6px 16px;
			/* font-size: 13px; */
			border-radius: 4px;
		}

	/* Grid maximize/restore functionality */
	.grid-container-normal {
		/* Normal container styling */
	}

	.grid-container-maximized {
		position: fixed;
		top: 0;
		left: 0;
		width: 100vw;
		height: 100vh;
		background: var(--kendo-color-surface);
		z-index: 10000;
		padding: 20px;
		box-sizing: border-box;
		overflow: auto;
	}

	.grid-container-maximized h1 {
		margin-top: 0;
		margin-bottom: 15px;
		font-size: 24px;
	}

	.grid-container-maximized .grid-actions {
		position: sticky;
		top: 0;
		background: var(--kendo-color-surface);
		padding: 10px 0;
		margin-bottom: 10px;
		border-bottom: 1px solid var(--kendo-color-border);
		z-index: 1;
	}

	/* Grid wrapper and header styling */
	.grid-wrapper {
		border: 1px solid var(--kendo-color-border);
		border-radius: 4px;
		overflow: hidden;
		background: var(--kendo-color-surface);
	}

	.grid-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 8px 12px;
		background: var(--kendo-color-surface-alt);
		border-bottom: 1px solid var(--kendo-color-border);
		font-size: 14px;
		font-weight: 600;
		color: var(--kendo-color-primary);
		min-height: 36px;
	}

	.grid-title {
		user-select: none;
		flex: 1;
		color: var(--kendo-color-primary);
	}

	.grid-controls {
		display: flex;
		gap: 4px;
	}

	.grid-maximize-btn {
		width: 24px !important;
		height: 24px !important;
		min-width: 24px !important;
		min-height: 24px !important;
		padding: 0 !important;
		border-radius: 2px !important;
		background: transparent !important;
		border: 1px solid transparent !important;
		color: var(--kendo-color-primary) !important;
	}

	.grid-maximize-btn:hover {
		background: var(--kendo-color-primary-subtle) !important;
		border-color: var(--kendo-color-border) !important;
		color: var(--kendo-color-primary) !important;
	}

	.grid-maximize-btn:active {
		background: var(--kendo-color-primary) !important;
		color: var(--kendo-color-on-primary) !important;
	}

	.grid-maximize-btn:focus {
		outline: none !important;
		box-shadow: none !important;
	}

	.grid-maximize-btn .k-icon {
		font-size: 12px !important;
	}

	/* Remove border radius from grid when inside wrapper */
	.grid-wrapper .k-grid {
		border: none !important;
		border-radius: 0 !important;
	}
</style>

@code {
	private List<TelerikWebApp.Client.Models.User> GridData = new();
	private List<UserViewModel> GridViewModels = new();
	private List<UserViewModel> FilteredGridData = new();
	private bool ShowFilterWindow = false;
	private CompositeFilterDescriptor? CurrentFilter;
	private bool HasActiveFilter => CurrentFilter?.FilterDescriptors?.Any() == true;
	private bool IsGridMaximized = false;

	protected override async Task OnInitializedAsync()
	{
		GridData = await UserService.GetUsersAsync();
		GridViewModels = GridData.Select(UserViewModel.FromUser).ToList();
		FilteredGridData = GridViewModels.ToList();
	}

	private void ShowFilterBuilder()
	{
		ShowFilterWindow = true;
	}

	private void ApplyFilter(CompositeFilterDescriptor? filterDescriptor)
	{
		CurrentFilter = filterDescriptor;
		ApplyCurrentFilter();
	}

	private void ClearFilter()
	{
		CurrentFilter = null;
		ApplyCurrentFilter();
	}

	private void ApplyCurrentFilter()
	{
		if (CurrentFilter == null || !CurrentFilter.FilterDescriptors.Any())
		{
			FilteredGridData = GridViewModels.ToList();
		} else
		{
			var query = GridViewModels.AsQueryable();
			var filteredQuery = query.ToDataSourceResult(new DataSourceRequest
			{
				Filters = new List<IFilterDescriptor> { CurrentFilter }
			});
			FilteredGridData = (filteredQuery.Data as IEnumerable<UserViewModel>)?.ToList() ?? new List<UserViewModel>();
		}
		StateHasChanged();
	}

	private async Task ToggleGridMaximize()
	{
		IsGridMaximized = !IsGridMaximized;
		StateHasChanged();

		// Remove focus from the button after click using JavaScript
		await Task.Delay(50); // Small delay to ensure the state change is rendered
		await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.grid-maximize-btn')?.blur()");
	}
}