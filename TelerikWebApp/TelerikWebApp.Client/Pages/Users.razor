@page "/users"
@using TelerikWebApp.Client.Models
@using TelerikWebApp.Client.Components
@using TelerikWebApp.Client.Services
@using Telerik.DataSource
@using Telerik.DataSource.Extensions
@inject UserService UserService
@inject IJSRuntime JSRuntime
@rendermode InteractiveAuto

<PageTitle>Users</PageTitle>

<div class="@(IsGridMaximized ? "grid-container-maximized" : "grid-container-normal")">
	@if (!IsGridMaximized)
	{
		<h1>Users Management</h1>
	}

	<div class="grid-wrapper">
		<div class="grid-header">
			<div class="grid-title">Users</div>
			<div class="grid-controls">
				<TelerikButton OnClick="@ToggleGridMaximize"
							   Icon="@(IsGridMaximized ? SvgIcon.WindowRestore : SvgIcon.Window)"
							   Class="grid-maximize-btn"
							   Title="@(IsGridMaximized ? "Restore" : "Maximize")">
				</TelerikButton>
			</div>
		</div>

		<TelerikGrid @ref="GridRef"
					 Data="@GridViewModels"
					 TItem="UserViewModel"
					 Pageable="true"
					 PageSize="@(IsGridMaximized ? 50 : 20)"
					 Sortable="true"
					 FilterMode="GridFilterMode.FilterMenu"
					 Height="@(IsGridMaximized ? "calc(100vh - 120px)" : "600px")"
					 Class="compact-grid"
					 OnStateChanged="@OnGridStateChanged">
			<GridSettings>
				<GridPagerSettings InputType="PagerInputType.Input" />
			</GridSettings>
			<GridColumns>
				<GridColumn Field="@nameof(UserViewModel.Id)" Width="80px" Title="ID" />
				<GridColumn Field="@nameof(UserViewModel.FirstName)" Width="150px" Title="First Name" />
				<GridColumn Field="@nameof(UserViewModel.LastName)" Width="150px" Title="Last Name" />
				<GridColumn Field="@nameof(UserViewModel.Email)" Width="250px" Title="Email" />
				<GridColumn Field="@nameof(UserViewModel.Department)" Width="180px" Title="Department" FilterMenuType="@FilterMenuType.CheckBoxList" />
				<GridColumn Field="@nameof(UserViewModel.Position)" Width="200px" Title="Position" FilterMenuType="@FilterMenuType.CheckBoxList" />
				<GridColumn Field="@nameof(UserViewModel.Salary)" Width="120px" Title="Salary" DisplayFormat="{0:C0}" />
				<GridColumn Field="@nameof(UserViewModel.StatusText)" Width="100px" Title="Active" FilterMenuType="@FilterMenuType.CheckBoxList">
					<Template>
						@{
							var user = (UserViewModel)context;
						}
						<span class="status-badge @(user.IsActive ? "status-active" : "status-inactive")">
							@user.StatusText
						</span>
					</Template>
				</GridColumn>
			</GridColumns>
		</TelerikGrid>
	</div>

	<div class="grid-actions">
		<TelerikButton OnClick="@ShowFilterBuilder" Icon="@SvgIcon.Filter" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">
			@(HasActiveFilter ? "Update Filter" : "Create Filter")
		</TelerikButton>
		@if (HasActiveFilter)
		{
			<TelerikButton OnClick="@ClearFilter" Icon="@SvgIcon.FilterClear" ThemeColor="@ThemeConstants.Button.ThemeColor.Secondary">
				Clear Filter
			</TelerikButton>
		}
	</div>
</div>

<UserFilterBuilder IsVisible="@ShowFilterWindow"
				   IsVisibleChanged="@((bool value) => ShowFilterWindow = value)"
				   FilterData="@GridViewModels"
				   OnFilterApplied="@ApplyFilter"
				   ExistingFilter="@GetCurrentFilter()" />
<style>

	/* Compact FilterMenu styling */
	.k-grid-filter-popup .k-filter-menu .k-popup {
		font-size: 12px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-textbox,
	.k-grid-filter-popup .k-filter-menu .k-dropdownlist,
	.k-grid-filter-popup .k-filter-menu .k-numerictextbox,
	.k-grid-filter-popup .k-filter-menu .k-datepicker,
	.k-grid-filter-popup .k-filter-menu .k-datetimepicker {
		height: 28px !important;
		font-size: 11px !important;
		padding: 2px 6px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-button {
		height: 28px !important;
		padding: 4px 12px !important;
		font-size: 11px !important;
		border-radius: 3px !important;
	}

		.k-grid-filter-popup .k-filter-menu .k-button.k-button-sm {
			height: 26px !important;
			padding: 3px 8px !important;
			font-size: 10px !important;
		}

	.k-grid-filter-popup .k-filter-menu .k-icon {
		font-size: 11px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-label {
		font-size: 11px !important;
		padding: 2px 4px !important;
		line-height: 1.2;
	}

	
	.k-grid-filter-popup .k-filter-menu .k-list {
		padding: 2px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-list-header {
		padding: 4px 8px !important;
		font-size: 10px !important;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.5px;
		background: var(--kendo-color-surface-alt) !important;
	}

	/* Compact FilterMenu form styling */
	.k-grid-filter-popup .k-filter-menu .k-form-field {
		margin-bottom: 8px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-form-field-wrap {
		padding: 2px 0 !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-filter-menu-container {
		padding: 8px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-filter-menu-buttons {
		padding: 6px 8px !important;
		gap: 6px !important;
		border-top: 1px solid var(--kendo-color-border-alt) !important;
	}

	/* Compact dropdown styling in filter menu */
	.k-grid-filter-popup .k-filter-menu .k-dropdownlist .k-dropdown-wrap {
		height: 28px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-dropdownlist .k-input {
		height: 26px !important;
		line-height: 26px !important;
		font-size: 11px !important;
		padding: 0 6px !important;
	}

	.k-grid-filter-popup .k-filter-menu .k-dropdownlist .k-select {
		height: 28px !important;
		width: 28px !important;
	}

		.k-grid-filter-popup .k-filter-menu .k-dropdownlist .k-select .k-icon {
			font-size: 10px !important;
		}

	/* Compact CheckBoxList ComboBox styling */
	.k-grid-filter-popup .k-filter-menu .k-multiselect {
		min-height: 28px !important;
		font-size: 11px !important;
	}

		.k-grid-filter-popup .k-filter-menu .k-multiselect .k-multiselect-wrap {
			min-height: 28px !important;
			padding: 2px 6px !important;
		}

		.k-grid-filter-popup .k-filter-menu .k-multiselect .k-input {
			height: 24px !important;
			line-height: 24px !important;
			font-size: 11px !important;
			padding: 0 !important;
		}

		.k-grid-filter-popup .k-filter-menu .k-multiselect .k-button {
			height: 28px !important;
			width: 28px !important;
			padding: 2px !important;
		}

			.k-grid-filter-popup .k-filter-menu .k-multiselect .k-button .k-icon {
				font-size: 10px !important;
			}

		/* Compact CheckBoxList tags/chips */
		.k-grid-filter-popup .k-filter-menu .k-multiselect .k-chip {
			height: 18px !important;
			padding: 1px 4px !important;
			font-size: 10px !important;
			line-height: 1.2 !important;
			margin: 1px 2px 1px 0 !important;
			border-radius: 2px !important;
		}

			.k-grid-filter-popup .k-filter-menu .k-multiselect .k-chip .k-chip-content {
				padding: 0 2px !important;
			}

			.k-grid-filter-popup .k-filter-menu .k-multiselect .k-chip .k-chip-action {
				width: 14px !important;
				height: 14px !important;
				padding: 0 !important;
			}

				.k-grid-filter-popup .k-filter-menu .k-multiselect .k-chip .k-chip-action .k-icon {
					font-size: 8px !important;
				}

	/* Search box in CheckBoxList popup */
	.k-grid-filter-popup .k-filter-menu .k-searchbox {
		height: 28px !important;
		margin-bottom: 6px !important;
	}

		.k-grid-filter-popup .k-filter-menu .k-searchbox .k-input-inner {
			height: 26px !important;
			font-size: 11px !important;
			padding: 2px 6px !important;
		}

		.k-grid-filter-popup .k-filter-menu .k-searchbox .k-button {
			height: 28px !important;
			width: 28px !important;
		}

		.k-grid-filter-popup .k-filter-menu .k-searchbox .k-input-icon {
			font-size: 10px !important;
		}

</style>

@code {
	private List<TelerikWebApp.Client.Models.User> GridData = new();
	private List<UserViewModel> GridViewModels = new();
	private bool ShowFilterWindow = false;
	private TelerikGrid<UserViewModel>? GridRef;
	private GridState<UserViewModel>? CurrentGridState;
	private bool HasActiveFilter => CurrentGridState?.FilterDescriptors?.Any() == true;
	private bool IsGridMaximized = false;

	protected override async Task OnInitializedAsync()
	{
		GridData = await UserService.GetUsersAsync();
		GridViewModels = GridData.Select(UserViewModel.FromUser).ToList();
	}

	private void OnGridStateChanged(GridStateEventArgs<UserViewModel> args)
	{
		CurrentGridState = args.GridState;
	}

	private void ShowFilterBuilder()
	{
		ShowFilterWindow = true;
	}

	private async Task ApplyFilter(CompositeFilterDescriptor? filterDescriptor)
	{
		if (GridRef != null)
		{
			// Get current state to preserve other settings
			var currentState = GridRef.GetState();

			var newState = new GridState<UserViewModel>
			{
				Page = currentState.Page,
				SortDescriptors = currentState.SortDescriptors,
				GroupDescriptors = currentState.GroupDescriptors,
				FilterDescriptors = new List<IFilterDescriptor>()
			};

			// Add the new filter from filter builder
			if (filterDescriptor != null && filterDescriptor.FilterDescriptors.Any())
			{
				newState.FilterDescriptors.Add(filterDescriptor);
			}

			await GridRef.SetStateAsync(newState);

			// Update the CurrentGridState to reflect new filters
			CurrentGridState = newState;
			StateHasChanged();
		}
	}

	private async Task ClearFilter()
	{
		if (GridRef != null)
		{
			// Get current state to preserve other settings
			var currentState = GridRef.GetState();

			var newState = new GridState<UserViewModel>
			{
				Page = currentState.Page,
				SortDescriptors = currentState.SortDescriptors,
				GroupDescriptors = currentState.GroupDescriptors,
				FilterDescriptors = new List<IFilterDescriptor>()
			};

			await GridRef.SetStateAsync(newState);

			// Update the CurrentGridState to reflect cleared filters
			CurrentGridState = newState;
			StateHasChanged();
		}
	}

	private CompositeFilterDescriptor? GetCurrentFilter()
	{
		if (CurrentGridState?.FilterDescriptors?.Any() != true) return null;

		// If there's only one filter and it's already a CompositeFilterDescriptor, return it directly
		if (CurrentGridState.FilterDescriptors.Count == 1)
		{
			var firstFilter = CurrentGridState.FilterDescriptors.First();
			if (firstFilter is CompositeFilterDescriptor singleComposite)
			{
				return singleComposite;
			}
		}

		// Only create a new CompositeFilterDescriptor if we have multiple filters
		var combined = new CompositeFilterDescriptor
		{
			LogicalOperator = FilterCompositionLogicalOperator.And
		};

		foreach (var descriptor in CurrentGridState.FilterDescriptors)
		{
			combined.FilterDescriptors.Add(descriptor);
		}

		return combined.FilterDescriptors.Any() ? combined : null;
	}

	private async Task ToggleGridMaximize()
	{
		// Store current page info before toggling
		var currentState = GridRef?.GetState();
		var currentPage = currentState?.Page ?? 1;
		var currentPageSize = IsGridMaximized ? 50 : 20;
		var currentItemIndex = ((currentPage - 1) * currentPageSize) + 1; // First item on current page

		IsGridMaximized = !IsGridMaximized;
		StateHasChanged();

		// After the grid re-renders with new page size, calculate and set the appropriate page
		await Task.Delay(100); // Allow grid to re-render

		if (GridRef != null)
		{
			var newPageSize = IsGridMaximized ? 50 : 20;
			var newPage = Math.Max(1, (int)Math.Ceiling((double)currentItemIndex / newPageSize));

			// Update the grid state to maintain position
			var newState = GridRef.GetState();
			newState.Page = newPage;
			await GridRef.SetStateAsync(newState);
		}

		// Remove focus from the button after click using JavaScript
		await Task.Delay(50);
		await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.grid-maximize-btn')?.blur()");
	}
}